{"version":3,"file":"static/js/349.3861b022.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} />\r\n        <img src={img} alt=\"error message\"\r\n            style={{\r\n                display: 'block', width: '250px', height: '250px',\r\n                objectFit: 'contain', margin: '0 auto'\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const { loading, error, getAllComics } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded);\n    };\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    };\n\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className='comics__item' key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className='comics__item-img' />\n                        <div className='comics__item-name'>{item.title}</div>\n                        <div className='comics__item-price'>{item.price}</div>\n                    </Link>\n                </li>\n            )\n        });\n\n        return (\n            <ul className='comics__grid'>{items}</ul>\n        )\n    };\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className='comics__list'>\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                disabled={newItemLoading}\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\n                className='button button__main button__long'\n                onClick={() => onRequest(offset)}\n            >\n                <div className='inner'>load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError };\r\n};","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://marvel-server-zeta.vercel.app/';\r\n    const _apiKey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df';\r\n    const _baseOffset = 20;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const response = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n\r\n        return response.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const response = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(response.data.result[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}` : 'not available',\r\n        };\r\n    };\r\n\r\n    return { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic };\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","className","children","_jsxs","Link","to","concat","id","thumbnail","title","price","renderItems","errorMessage","spinner","Spinner","disabled","onClick","AppBanner","avengers","avengersLogo","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComic","result"],"sourceRoot":""}