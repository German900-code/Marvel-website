{"version":3,"file":"static/js/895.748d8bbc.chunk.js","mappings":"sLAEA,MAYA,EAZqBA,KAGbC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAKC,IAAI,gBACfC,MAAO,CACHC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAC1CC,UAAW,UAAWC,OAAQ,W,8JCA9C,MAkDMC,EAAOC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,KAAEE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,GAASL,EAEzD,OACIM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BpB,EAAAA,EAAAA,KAAA,OAAKC,IAAKc,EAAWZ,IAAI,mBAAmBgB,UAAU,qBACtDD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BpB,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,mBAAkBC,SAAEP,KACjCb,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,oBAAmBC,SAC3BN,GAA4B,yBAEjCI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BpB,EAAAA,EAAAA,KAAA,KAAGqB,KAAML,EAAUG,UAAU,sBAAqBC,UAC9CpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,gBAE3BpB,EAAAA,EAAAA,KAAA,KAAGqB,KAAMJ,EAAME,UAAU,2BAA0BC,UAC/CpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,mBAIjC,EAId,EA1EmBE,KACf,MAAOV,EAAMW,IAAWC,EAAAA,EAAAA,UAAS,CAAC,IAE5B,QAAEC,EAAO,MAAEC,EAAK,aAAEC,EAAY,WAAEC,IAAeC,EAAAA,EAAAA,MACrDC,EAAAA,EAAAA,YAAU,KACNC,IACA,MAAMC,EAAUC,YAAYF,EAAY,KAExC,MAAO,KACHG,cAAcF,EAAQ,CACzB,GACF,IAGH,MAAMG,EAAgBvB,IAClBW,EAAQX,EAAK,EAGXmB,EAAaA,KACfH,IACA,MAAMQ,EAAKC,KAAKC,MAAmB,GAAbD,KAAKE,UAC3BZ,EAAaS,GACRI,KAAKL,EAAa,EAGrBM,EAAef,GAAQ1B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1C2C,EAAUjB,GAAUzB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,IAAM,KAClCC,EAAYnB,GAAWC,EAAgC,MAAvB1B,EAAAA,EAAAA,KAACU,EAAI,CAACE,KAAMA,IAClD,OACIM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBqB,EACAC,EACAE,GACD1B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,oBAAmBC,SAAA,CAAC,+BACFpB,EAAAA,EAAAA,KAAA,SAAM,6CAGrCA,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,oBAAmBC,SAAC,2BAGjCpB,EAAAA,EAAAA,KAAA,UAAQmB,UAAU,sBAAqBC,UACnCpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAQ0B,QAASd,EAAWX,SAAC,cAEhDpB,EAAAA,EAAAA,KAAA,OAAKC,IAAK6C,EAAS3C,IAAI,UAAUgB,UAAU,gCAE7C,EC4Dd,EA1GkB4B,IACd,MAAOC,EAAUC,IAAezB,EAAAA,EAAAA,UAAS,KAClC0B,EAAgBC,IAAqB3B,EAAAA,EAAAA,WAAS,IAC9C4B,EAAQC,IAAa7B,EAAAA,EAAAA,UAAS,IAC9B8B,EAAWC,IAAgB/B,EAAAA,EAAAA,WAAS,IACrC,QAAEC,EAAO,MAAEC,EAAK,iBAAE8B,IAAqB3B,EAAAA,EAAAA,MAE7CC,EAAAA,EAAAA,YAAU,KACN2B,EAAUL,GAAQ,EAAK,GACxB,IAEH,MAAMK,EAAYA,CAACL,EAAQM,KACbP,GAAVO,GACAF,EAAiBJ,GACZZ,KAAKmB,EAAiB,EAIzBA,EAAoBC,IAEtB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACrBD,GAAQ,GAGZZ,GAAYD,GAAY,IAAIA,KAAaY,KACzCT,GAAkBD,IAAkB,IACpCG,GAAUD,GAAUA,EAAS,IAC7BG,GAAaD,GAAaO,GAAM,EAG9BE,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAc7B,IAChB2B,EAASG,QAAQ9B,GAAI+B,UAAUC,IAAI,uBACnCL,EAASG,QAAQG,SAAQC,GAAQA,EAAKH,UAAUI,OAAO,yBACvDR,EAASG,QAAQ9B,GAAIoC,OAAO,EA4C1BC,EAvCeC,KACjB,MAAMD,EAAQC,EAAIC,KAAI,CAACL,EAAMM,KACzB,IAAIC,EAAW,CAAE,UAAa,SAK9B,MAJuB,wEAAnBP,EAAKvD,YACL8D,EAAW,CAAE,UAAa,WAI1B3D,EAAAA,EAAAA,MAAA,MACIC,UAAU,aAEV0B,QAASA,KACLE,EAAM+B,eAAeR,EAAKlC,IAC1B6B,EAAYW,EAAE,EAElBG,SAAU,EACVC,IAAKC,GAAMlB,EAASG,QAAQU,GAAKK,EACjCC,UAAYC,IACM,KAAVA,EAAEC,KAAwB,UAAVD,EAAEC,MAClBrC,EAAM+B,eAAeR,EAAKlC,IAC1B6B,EAAYW,GAChB,EACFxD,SAAA,EAEFpB,EAAAA,EAAAA,KAAA,OACIC,IAAKqE,EAAKvD,UACVZ,IAAKmE,EAAKzD,KACVT,MAAOyE,KACX7E,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,aAAYC,SAAEkD,EAAKzD,SAlB7ByD,EAAKlC,GAmBR,IAId,OACIpC,EAAAA,EAAAA,KAAA,MAAImB,UAAU,aAAYC,SACrBqD,GACA,EAGCY,CAAYrC,GAEpBP,EAAef,GAAQ1B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1C2C,EAAUjB,IAAYyB,GAAiBlD,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,IAAM,KAE3D,OACIzB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBqB,EACAC,EACA+B,GACDzE,EAAAA,EAAAA,KAAA,UACImB,UAAU,mCACVmE,SAAUpC,EACV9C,MAAO,CAAE,QAAWkD,EAAY,OAAS,SACzCT,QAASA,IAAMY,EAAUL,GAAQhC,UACjCpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,kBAEzB,ECtFd,EAjBiBmE,KAETrE,EAAAA,EAAAA,MAAAsE,EAAAA,SAAA,CAAApE,SAAA,EACIpB,EAAAA,EAAAA,KAAA,KAAGmB,UAAU,eAAcC,SAAC,kDAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACnCpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,4BACfnB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,6BAEnBnB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,2BACfnB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,2BACfnB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,gCCmCzBT,EAAOC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,KAAEE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,EAAI,OAAEwE,GAAW7E,EAEjE,IAAIiE,EAAW,CAAE,UAAa,SAK9B,MAJkB,wEAAd9D,IACA8D,EAAW,CAAE,UAAa,aAI1B3D,EAAAA,EAAAA,MAAAsE,EAAAA,SAAA,CAAApE,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBpB,EAAAA,EAAAA,KAAA,OAAKC,IAAKc,EAAWZ,IAAKU,EAAMT,MAAOyE,KACvC3D,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,kBAAiBC,SAAEP,KAClCK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACvBpB,EAAAA,EAAAA,KAAA,KAAGqB,KAAML,EAAUG,UAAU,sBAAqBC,UAC9CpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,gBAE3BpB,EAAAA,EAAAA,KAAA,KAAGqB,KAAMJ,EAAME,UAAU,2BAA0BC,UAC/CpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,QAAOC,SAAC,qBAKvCpB,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,cAAaC,SACvBN,KAELd,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,eAAcC,SAAC,aAC9BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,oBAAmBC,SAAA,CAC5BqE,EAAO3B,OAAS,EAAI,KAAO,yCAExB2B,EAAOd,KAAI,CAACL,EAAMM,KAEd,KAAIA,EAAI,GACR,OACI5E,EAAAA,EAAAA,KAAA,MAAYmB,UAAU,oBAAmBC,SACpCkD,EAAKzD,MADD+D,EAEJ,SAKtB,EAQX,EAxFkB7B,IACd,MAAOnC,EAAMW,IAAWC,EAAAA,EAAAA,UAAS,OAE3B,QAAEC,EAAO,MAAEC,EAAK,aAAEC,EAAY,WAAEC,IAAeC,EAAAA,EAAAA,MAErDC,EAAAA,EAAAA,YAAU,KACNC,GAAY,GACb,CAACgB,EAAM2C,SAEV,MAAM3D,EAAaA,KACf,MAAM,OAAE2D,GAAW3C,EACd2C,IAGL9D,IACAD,EAAa+D,GACRlD,KAAKL,GAAa,EAGrBA,EAAgBvB,IAClBW,EAAQX,EAAK,EAGX+E,EAAW/E,GAAQa,GAAWC,EAAQ,MAAO1B,EAAAA,EAAAA,KAACuF,EAAQ,IACtD9C,EAAef,GAAQ1B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1C2C,EAAUjB,GAAUzB,EAAAA,EAAAA,KAAC2C,EAAAA,EAAO,IAAM,KAClCC,EAAYnB,GAAWC,IAAUd,EAA+B,MAAvBZ,EAAAA,EAAAA,KAACU,EAAI,CAACE,KAAMA,IAE3D,OACIM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBuE,EACAlD,EACAC,EACAE,IACC,ECzCd,MAAMgD,UAAsBC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAClCC,MAAQ,CACJtE,OAAO,EACV,CAEDuE,iBAAAA,CAAkBvE,EAAOwE,GACrBC,QAAQC,IAAI1E,EAAOwE,GACnBG,KAAKC,SAAS,CACV5E,OAAO,GAEf,CAEA6E,MAAAA,GACI,OAAIF,KAAKL,MAAMtE,OACJ1B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAEjBsG,KAAKtD,MAAM3B,QACtB,EAIJ,U,qDCSA,EAzBiBoF,KACb,MAAOC,EAAclF,IAAWC,EAAAA,EAAAA,UAAS,MAMzC,OACIN,EAAAA,EAAAA,MAAAsE,EAAAA,SAAA,CAAApE,SAAA,EACIpB,EAAAA,EAAAA,KAAC4F,EAAa,CAAAxE,UACVpB,EAAAA,EAAAA,KAACsB,EAAU,OAEfJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BpB,EAAAA,EAAAA,KAAC4F,EAAa,CAAAxE,UACVpB,EAAAA,EAAAA,KAAC0G,EAAQ,CAAC5B,eAXF1C,IACpBb,EAAQa,EAAG,OAYHpC,EAAAA,EAAAA,KAAC4F,EAAa,CAAAxE,UACVpB,EAAAA,EAAAA,KAAC2G,EAAQ,CAACjB,OAAQe,UAG1BzG,EAAAA,EAAAA,KAAA,OAAKmB,UAAU,gBAAgBlB,IAAK2G,EAAYzG,IAAI,aACrD,C,6CC3BJ,MCwDP,EAvDyB0B,KACrB,MAAM,QAAEJ,EAAO,QAAEoF,EAAO,MAAEnF,EAAK,WAAEE,GDFdkF,MACnB,MAAOrF,EAASsF,IAAcvF,EAAAA,EAAAA,WAAS,IAChCE,EAAOsF,IAAYxF,EAAAA,EAAAA,UAAS,MAwBnC,MAAO,CAAEC,UAASoF,SAtBFI,EAAAA,EAAAA,cAAYC,eAAOC,GAAwF,IAAnFC,EAAMrB,UAAAjC,OAAA,QAAAuD,IAAAtB,UAAA,GAAAA,UAAA,GAAG,MAAOuB,EAAIvB,UAAAjC,OAAA,QAAAuD,IAAAtB,UAAA,GAAAA,UAAA,GAAG,KAAMwB,EAAOxB,UAAAjC,OAAA,QAAAuD,IAAAtB,UAAA,GAAAA,UAAA,GAAG,CAAE,eAAgB,oBAE7FgB,GAAW,GAEX,IACI,MAAMS,QAAiBC,MAAMN,EAAK,CAAEC,SAAQE,OAAMC,YAClD,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAM,mBAADC,OAAoBT,EAAG,cAAAS,OAAaJ,EAASK,SAEhE,MAAMC,QAAaN,EAASO,OAG5B,OADAhB,GAAW,GACJe,CACX,CAAE,MAAO3C,GAGL,MAFA4B,GAAW,GACXC,EAAS7B,EAAE6C,SACL7C,CACV,CACJ,GAAG,IAIwBzD,QAAOE,YAFfqF,EAAAA,EAAAA,cAAY,IAAMD,EAAS,OAAO,IAEP,ECxBEF,GAE1CmB,EAAW,yCACXC,EAAU,0CAyBVC,EAAuBvH,IAClB,CACHwB,GAAIxB,EAAKwB,GACTvB,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAW,GAAA8G,OAAMhH,EAAKE,YAAYsH,MAAM,EAAG,KAAI,OAAQ,6CACzErH,UAAWH,EAAKG,UAAUsH,KAAO,IAAMzH,EAAKG,UAAUuH,UACtDtH,SAAUJ,EAAK2H,KAAK,GAAGpB,IACvBlG,KAAML,EAAK2H,KAAK,GAAGpB,IACnB1B,OAAQ7E,EAAK6E,OAAOhB,QAGtB+D,EAAoB/C,IAAY,IAADgD,EACjC,MAAO,CACHrG,GAAIqD,EAAOrD,GACXsG,MAAOjD,EAAOiD,MACd5H,YAAa2E,EAAO3E,aAAe,0BACnC6H,UAAWlD,EAAOkD,UAAS,GAAAf,OAAMnC,EAAOkD,UAAS,OAAQ,2CACzD5H,UAAW0E,EAAO1E,UAAUsH,KAAO,IAAM5C,EAAO1E,UAAUuH,UAC1DM,UAA+B,QAArBH,EAAAhD,EAAOoD,YAAY,UAAE,IAAAJ,OAAA,EAArBA,EAAuBG,WAAY,QAC7CE,MAAOrD,EAAOsD,OAAO,GAAGD,MAAK,GAAAlB,OAAMnC,EAAOsD,OAAO,GAAGD,OAAU,gBACjE,EAGL,MAAO,CAAErH,UAASC,QAAOE,aAAY4B,iBA5CZ0D,iBAAiC,IAA1B9D,EAAM2C,UAAAjC,OAAA,QAAAuD,IAAAtB,UAAA,GAAAA,UAAA,GAHlB,GAKhB,aADkBc,EAAQ,GAADe,OAAIK,EAAQ,8BAAAL,OAA6BxE,EAAM,KAAAwE,OAAIM,KACjEJ,KAAKkB,QAAQrE,IAAIwD,EAChC,EAyCuDxG,aAvClCuF,UACjB,MAAM+B,QAAYpC,EAAQ,GAADe,OAAIK,EAAQ,eAAAL,OAAcxF,EAAE,KAAAwF,OAAIM,IACzD,OAAOC,EAAoBc,EAAInB,KAAKkB,QAAQ,GAAG,EAqCkBE,aAlChDhC,iBAAuB,IAAhB9D,EAAM2C,UAAAjC,OAAA,QAAAuD,IAAAtB,UAAA,GAAAA,UAAA,GAAG,EAGjC,aAFuBc,EAAQ,GAADe,OAAIK,EAAQ,8CAAAL,OAA6CxE,EAAM,KAAAwE,OAAIM,KAEjFJ,KAAKkB,QAAQrE,IAAI6D,EACrC,EA8BmFW,SA5BlEjC,UACb,MAAMM,QAAiBX,EAAQ,GAADe,OAAIK,EAAQ,WAAAL,OAAUxF,EAAE,KAAAwF,OAAIM,IAC1D,OAAOM,EAAiBhB,EAASM,KAAKsB,OAAO,GAAG,EA0ByC,C","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} />\r\n        <img src={img} alt=\"error message\"\r\n            style={{\r\n                display: 'block', width: '250px', height: '250px',\r\n                objectFit: 'contain', margin: '0 auto'\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useEffect, useState } from 'react';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 30000);\n\n        return () => {\n            clearInterval(timerId);\n        };\n    }, [])\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (20 - 1));\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n    return (\n        <div className=\"randomchar\" >\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={updateChar}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description ? description : 'Not description yet'}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default RandomChar;","import { useState, useEffect, useRef, use } from 'react';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(1);\n    const [charEnded, setCharEnded] = useState(false);\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = id => {\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    const renderItems = (arr) => {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    onKeyDown={(e) => {\n                        if (e.key === '' || e.key === 'Enter') {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}\n                >\n                    <img\n                        src={item.thumbnail}\n                        alt={item.name}\n                        style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li >\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\" >\n                {items}\n            </ul>\n        )\n    }\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded);\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError };\r\n};","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://marvel-server-zeta.vercel.app/';\r\n    const _apiKey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df';\r\n    const _baseOffset = 20;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const response = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\r\n\r\n        return response.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const response = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(response.data.result[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}` : 'not available',\r\n        };\r\n    };\r\n\r\n    return { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic };\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","View","_ref","char","name","description","thumbnail","homepage","wiki","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","classList","add","forEach","item","remove","focus","items","arr","map","i","imgStyle","onCharSelected","tabIndex","ref","el","onKeyDown","e","key","renderItems","disabled","Skeleton","_Fragment","comics","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","message","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic","result"],"sourceRoot":""}